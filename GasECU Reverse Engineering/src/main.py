import serial


def process_data(data):
    responses = {
        b"\xC0\x01\x01\xC2": b"\x01\x30\x01",
        b"\xC0\x02\x02\xC4": b"\x02\x31\x36\x3A\x32\x36\x3A\x31\x31\x4D\x61\x72\x20\x31\x32\x20\x32\x30\x31\x32\xFF",

        b"\xC0\x53\x00\x13": b"\x53\x4A\x6D",
        b"\xC0\x53\x01\x14": b"\x53\x04\x27",
        b"\xC0\x53\x02\x15": b"\x53\x00\x23",
        b"\xC0\x53\x03\x16": b"\x53\x04\x27",
        b"\xC0\x53\x04\x17": b"\x53\x02\x25",
        b"\xC0\x53\x05\x18": b"\x53\x00\x23",
        b"\xC0\x53\x06\x19": b"\x53\xFF\x22",

        b"\xC0\x40\x1A\x1A": b"\x40\x00\x5B\x6B",
        b"\xC0\x3F\x00\xFF": b"\x3F\xF0\xFF",

        b"\xC0\x07\x22\xE9": b"\x07\x22\x9C\x95",
        b"\xC0\x07\x21\xE8": b"\x07\x21\x03\xFB",

        b"\xC0\x40\x1C\x1C": b"\x40\x00\x01\x11",

        b"\xC0\xD8\xD8\x70": b"\xD8\x03\x0F\x80\x0A\x72\xDB\x24\x1E\x07\xCD\x00\x82\x01\xF9\x01\x00\x1C\x01\xF4\x01",

        b"\xC0\x35\x00\xF5": b"\xC8\x8F\x5C\x28\xE0",

        b"\xC0\x36\x00\xF6": b"\x36\x40\x4E\x5B\x68\x57",

        b"\xC0\x07\x23\xEA": b"\x07\x23\xC3\xBD",

        b"\xC0\x51\x0B\x1C": b"\x51\x0B\x01\x90\xBD",
        b"\xC0\x51\x0C\x1D": b"\x51\x0C\x1F\x40\x8C",

        b"\xC0\x07\x1F\xE6": b"\x07\x1F\x20\x16",
        b"\xC0\x07\x1D\xE4": b"\x07\x1D\x5A\x4E",

        b"\xC0\x51\x0E\x1F": b"\x51\x0E\x00\x07\x36",

        b"\xC0\x07\x20\xE7": b"\x07\x20\x01\xF8",
        b"\xC0\x07\x25\xEC": b"\x07\x25\x41\x3D",

        b"\xC0\x12\x4A\x1C": b"\x12\x4A\x00\x03\x2F",

        b"\xC0\x07\x2A\xF1": b"\x07\x2A\x9C\x9D",
        b"\xC0\x07\x28\xEF": b"\x07\x28\x01\x00",

        b"\xC0\x51\x10\x21": b"\x51\x10\x02\x31\x64",

        b"\xC0\x07\x26\xED": b"\x07\x26\x4D\x4A",
        b"\xC0\x07\x27\xEE": b"\x07\x27\x32\x30",
        b"\xC0\x07\x13\xDA": b"\x07\x13\x03\xED",
        b"\xC0\x07\x2B\xF2": b"\x07\x2B\x32\x34",
        b"\xC0\x07\x2C\xF3": b"\x07\x2C\xE2\xE5",

        b"\xC0\x93\x00\x53": b"\x93\x00\x00\x00\x00\x00\x00\x00\x00\x63",

        b"\xC0\x07\x2D\xF4": b"\x07\x2D\x02\x06",
        b"\xC0\x07\x2E\xF5": b"\x07\x2E\x02\x07",

        b"\xC0\x51\x12\x23": b"\x51\x12\x09\xC4\x00",
        b"\xC0\x51\x13\x24": b"\x51\x13\x02\xEC\x22",

        b"\xC0\x07\x31\xF8": b"\x07\x31\x00\x08",
        b"\xC0\x07\x32\xF9": b"\x07\x32\x00\x09",

        b"\xC0\x51\x16\x27": b"\x51\x16\x12\x43\x8C",
        b"\xC0\x56\x00\x16": b"\x56\x3C\x27\x10\x99",
        b"\xC0\x54\x00\x14": b"\x54\x3B\xC5\x15\x07\x7E\x91\x92\xD4\x3B\xC5\x15\x07\x7E\x8B\xA4\x34\x3B\xC5\x15\x07",

        b"\xC0\x07\x34\xFB": b"\x07\x34\x00\x0B",
        b"\xC0\x07\x2F\xF6": b"\x07\x2F\x00\x06",

        b"\xC0\x51\x11\x22": b"\x51\x11\x00\x00\x32",
        b"\xC0\x51\x18\x29": b"\x51\x18\x01\xF4\x2E",
        b"\xC0\x51\x19\x2A": b"\x51\x19\xFF\xFF\x38",
        b"\xC0\x51\x14\x25": b"\x51\x14\x01\x76\xAC",
        b"\xC0\x51\x15\x26": b"\x51\x15\x0E\x9C\xE0",
        # b"\xBC\xE1\xE1\x7E": b"\xBC\xE1\xE1\x7E"
    }
    return responses.get(data, b'')


def process_continous(data):
    responses = {
        b"\xC0\x0B\x0B\xD6": b"\x0B\xB7\x7A\x6B\x9B\x00\x17\x64\x14\x82\x6B\x82\x6A\x02\x69\x02\x68\x00\x00\x00\x00",
        b"\xC0\x40\x29\x29": b"\x40\x00\x05\x15",

        b"\xC0\x64\xA5\xC9": b"\x64\x03\x6A\x0D\x60\x7A\x6B\x18\xB8\x00\x00\x00\xC3",
        b"\xC0\x40\x28\x28": b"\x40\x00\x00\x10",

        b"\xC0\x53\x00\x13": b"\x53\x4A\x6D",
        b"\xC0\x40\x0D\x0D": b"\x40\x00\x8E\x9E",
        b"\xC0\x40\x0F\x0F": b"\x40\x00\x1A\x2A",
    }


if __name__ == "__main__":
    ser = serial.Serial()
    ser.baudrate = 9600
    ser.timeout = 0
    ser.port = "COM12"
    ser.open()

    to_send = []

    # input_buffer = []

    while True:
        data = ser.read(ser.in_waiting)
        length = len(data)
        # if length > 0:
        #     print(length)

        if length == 0:
            continue

        # print("Processing data")
        response = process_data(data)
        if response:
            print("We got this")
            ser.write(bytes([0xD0]))
            ser.write(response)
        else:
            print(f"Nieznane dane: {data.hex().upper()}")
